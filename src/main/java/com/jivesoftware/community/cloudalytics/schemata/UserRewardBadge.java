/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.jivesoftware.community.cloudalytics.schemata;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserRewardBadge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7890993802148111060L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserRewardBadge\",\"namespace\":\"com.jivesoftware.community.cloudalytics.schemata\",\"fields\":[{\"name\":\"badgeId\",\"type\":{\"type\":\"string\",\"order\":\"ignore\"}},{\"name\":\"userEmail\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"streamEntryId\",\"type\":\"string\"},{\"name\":\"streamEntryUrl\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence badgeId;
  @Deprecated public java.lang.CharSequence userEmail;
  @Deprecated public java.lang.CharSequence message;
  @Deprecated public java.lang.CharSequence streamEntryId;
  @Deprecated public java.lang.CharSequence streamEntryUrl;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UserRewardBadge() {}

  /**
   * All-args constructor.
   */
  public UserRewardBadge(java.lang.CharSequence badgeId, java.lang.CharSequence userEmail, java.lang.CharSequence message, java.lang.CharSequence streamEntryId, java.lang.CharSequence streamEntryUrl) {
    this.badgeId = badgeId;
    this.userEmail = userEmail;
    this.message = message;
    this.streamEntryId = streamEntryId;
    this.streamEntryUrl = streamEntryUrl;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return badgeId;
    case 1: return userEmail;
    case 2: return message;
    case 3: return streamEntryId;
    case 4: return streamEntryUrl;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: badgeId = (java.lang.CharSequence)value$; break;
    case 1: userEmail = (java.lang.CharSequence)value$; break;
    case 2: message = (java.lang.CharSequence)value$; break;
    case 3: streamEntryId = (java.lang.CharSequence)value$; break;
    case 4: streamEntryUrl = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'badgeId' field.
   */
  public java.lang.CharSequence getBadgeId() {
    return badgeId;
  }

  /**
   * Sets the value of the 'badgeId' field.
   * @param value the value to set.
   */
  public void setBadgeId(java.lang.CharSequence value) {
    this.badgeId = value;
  }

  /**
   * Gets the value of the 'userEmail' field.
   */
  public java.lang.CharSequence getUserEmail() {
    return userEmail;
  }

  /**
   * Sets the value of the 'userEmail' field.
   * @param value the value to set.
   */
  public void setUserEmail(java.lang.CharSequence value) {
    this.userEmail = value;
  }

  /**
   * Gets the value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'streamEntryId' field.
   */
  public java.lang.CharSequence getStreamEntryId() {
    return streamEntryId;
  }

  /**
   * Sets the value of the 'streamEntryId' field.
   * @param value the value to set.
   */
  public void setStreamEntryId(java.lang.CharSequence value) {
    this.streamEntryId = value;
  }

  /**
   * Gets the value of the 'streamEntryUrl' field.
   */
  public java.lang.CharSequence getStreamEntryUrl() {
    return streamEntryUrl;
  }

  /**
   * Sets the value of the 'streamEntryUrl' field.
   * @param value the value to set.
   */
  public void setStreamEntryUrl(java.lang.CharSequence value) {
    this.streamEntryUrl = value;
  }

  /**
   * Creates a new UserRewardBadge RecordBuilder.
   * @return A new UserRewardBadge RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder newBuilder() {
    return new com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder();
  }
  
  /**
   * Creates a new UserRewardBadge RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserRewardBadge RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder newBuilder(com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder other) {
    return new com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder(other);
  }
  
  /**
   * Creates a new UserRewardBadge RecordBuilder by copying an existing UserRewardBadge instance.
   * @param other The existing instance to copy.
   * @return A new UserRewardBadge RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder newBuilder(com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge other) {
    return new com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder(other);
  }
  
  /**
   * RecordBuilder for UserRewardBadge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserRewardBadge>
    implements org.apache.avro.data.RecordBuilder<UserRewardBadge> {

    private java.lang.CharSequence badgeId;
    private java.lang.CharSequence userEmail;
    private java.lang.CharSequence message;
    private java.lang.CharSequence streamEntryId;
    private java.lang.CharSequence streamEntryUrl;

    /** Creates a new Builder */
    private Builder() {
      super(com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.badgeId)) {
        this.badgeId = data().deepCopy(fields()[0].schema(), other.badgeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userEmail)) {
        this.userEmail = data().deepCopy(fields()[1].schema(), other.userEmail);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamEntryId)) {
        this.streamEntryId = data().deepCopy(fields()[3].schema(), other.streamEntryId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.streamEntryUrl)) {
        this.streamEntryUrl = data().deepCopy(fields()[4].schema(), other.streamEntryUrl);
        fieldSetFlags()[4] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing UserRewardBadge instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge other) {
            super(com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.SCHEMA$);
      if (isValidValue(fields()[0], other.badgeId)) {
        this.badgeId = data().deepCopy(fields()[0].schema(), other.badgeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userEmail)) {
        this.userEmail = data().deepCopy(fields()[1].schema(), other.userEmail);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamEntryId)) {
        this.streamEntryId = data().deepCopy(fields()[3].schema(), other.streamEntryId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.streamEntryUrl)) {
        this.streamEntryUrl = data().deepCopy(fields()[4].schema(), other.streamEntryUrl);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'badgeId' field.
      * @return The value.
      */
    public java.lang.CharSequence getBadgeId() {
      return badgeId;
    }

    /**
      * Sets the value of the 'badgeId' field.
      * @param value The value of 'badgeId'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder setBadgeId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.badgeId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'badgeId' field has been set.
      * @return True if the 'badgeId' field has been set, false otherwise.
      */
    public boolean hasBadgeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'badgeId' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder clearBadgeId() {
      badgeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userEmail' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserEmail() {
      return userEmail;
    }

    /**
      * Sets the value of the 'userEmail' field.
      * @param value The value of 'userEmail'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder setUserEmail(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.userEmail = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'userEmail' field has been set.
      * @return True if the 'userEmail' field has been set, false otherwise.
      */
    public boolean hasUserEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userEmail' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder clearUserEmail() {
      userEmail = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder clearMessage() {
      message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamEntryId' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreamEntryId() {
      return streamEntryId;
    }

    /**
      * Sets the value of the 'streamEntryId' field.
      * @param value The value of 'streamEntryId'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder setStreamEntryId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.streamEntryId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'streamEntryId' field has been set.
      * @return True if the 'streamEntryId' field has been set, false otherwise.
      */
    public boolean hasStreamEntryId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'streamEntryId' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder clearStreamEntryId() {
      streamEntryId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamEntryUrl' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreamEntryUrl() {
      return streamEntryUrl;
    }

    /**
      * Sets the value of the 'streamEntryUrl' field.
      * @param value The value of 'streamEntryUrl'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder setStreamEntryUrl(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.streamEntryUrl = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'streamEntryUrl' field has been set.
      * @return True if the 'streamEntryUrl' field has been set, false otherwise.
      */
    public boolean hasStreamEntryUrl() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'streamEntryUrl' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.UserRewardBadge.Builder clearStreamEntryUrl() {
      streamEntryUrl = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public UserRewardBadge build() {
      try {
        UserRewardBadge record = new UserRewardBadge();
        record.badgeId = fieldSetFlags()[0] ? this.badgeId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.userEmail = fieldSetFlags()[1] ? this.userEmail : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.message = fieldSetFlags()[2] ? this.message : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.streamEntryId = fieldSetFlags()[3] ? this.streamEntryId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.streamEntryUrl = fieldSetFlags()[4] ? this.streamEntryUrl : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
