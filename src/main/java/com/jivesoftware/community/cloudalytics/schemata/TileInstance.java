/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.jivesoftware.community.cloudalytics.schemata;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TileInstance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7547003799986736322L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TileInstance\",\"namespace\":\"com.jivesoftware.community.cloudalytics.schemata\",\"fields\":[{\"name\":\"tileDefinitionObjectType\",\"type\":{\"type\":\"string\",\"order\":\"ignore\"}},{\"name\":\"tileDefinitionObjectId\",\"type\":\"long\"},{\"name\":\"tileDefinitionName\",\"type\":\"string\"},{\"name\":\"tileDefinitionVisualType\",\"type\":\"string\"},{\"name\":\"isActivityStream\",\"type\":\"boolean\"},{\"name\":\"extensionUUID\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence tileDefinitionObjectType;
  @Deprecated public long tileDefinitionObjectId;
  @Deprecated public java.lang.CharSequence tileDefinitionName;
  @Deprecated public java.lang.CharSequence tileDefinitionVisualType;
  @Deprecated public boolean isActivityStream;
  @Deprecated public java.lang.CharSequence extensionUUID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TileInstance() {}

  /**
   * All-args constructor.
   */
  public TileInstance(java.lang.CharSequence tileDefinitionObjectType, java.lang.Long tileDefinitionObjectId, java.lang.CharSequence tileDefinitionName, java.lang.CharSequence tileDefinitionVisualType, java.lang.Boolean isActivityStream, java.lang.CharSequence extensionUUID) {
    this.tileDefinitionObjectType = tileDefinitionObjectType;
    this.tileDefinitionObjectId = tileDefinitionObjectId;
    this.tileDefinitionName = tileDefinitionName;
    this.tileDefinitionVisualType = tileDefinitionVisualType;
    this.isActivityStream = isActivityStream;
    this.extensionUUID = extensionUUID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tileDefinitionObjectType;
    case 1: return tileDefinitionObjectId;
    case 2: return tileDefinitionName;
    case 3: return tileDefinitionVisualType;
    case 4: return isActivityStream;
    case 5: return extensionUUID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tileDefinitionObjectType = (java.lang.CharSequence)value$; break;
    case 1: tileDefinitionObjectId = (java.lang.Long)value$; break;
    case 2: tileDefinitionName = (java.lang.CharSequence)value$; break;
    case 3: tileDefinitionVisualType = (java.lang.CharSequence)value$; break;
    case 4: isActivityStream = (java.lang.Boolean)value$; break;
    case 5: extensionUUID = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tileDefinitionObjectType' field.
   */
  public java.lang.CharSequence getTileDefinitionObjectType() {
    return tileDefinitionObjectType;
  }

  /**
   * Sets the value of the 'tileDefinitionObjectType' field.
   * @param value the value to set.
   */
  public void setTileDefinitionObjectType(java.lang.CharSequence value) {
    this.tileDefinitionObjectType = value;
  }

  /**
   * Gets the value of the 'tileDefinitionObjectId' field.
   */
  public java.lang.Long getTileDefinitionObjectId() {
    return tileDefinitionObjectId;
  }

  /**
   * Sets the value of the 'tileDefinitionObjectId' field.
   * @param value the value to set.
   */
  public void setTileDefinitionObjectId(java.lang.Long value) {
    this.tileDefinitionObjectId = value;
  }

  /**
   * Gets the value of the 'tileDefinitionName' field.
   */
  public java.lang.CharSequence getTileDefinitionName() {
    return tileDefinitionName;
  }

  /**
   * Sets the value of the 'tileDefinitionName' field.
   * @param value the value to set.
   */
  public void setTileDefinitionName(java.lang.CharSequence value) {
    this.tileDefinitionName = value;
  }

  /**
   * Gets the value of the 'tileDefinitionVisualType' field.
   */
  public java.lang.CharSequence getTileDefinitionVisualType() {
    return tileDefinitionVisualType;
  }

  /**
   * Sets the value of the 'tileDefinitionVisualType' field.
   * @param value the value to set.
   */
  public void setTileDefinitionVisualType(java.lang.CharSequence value) {
    this.tileDefinitionVisualType = value;
  }

  /**
   * Gets the value of the 'isActivityStream' field.
   */
  public java.lang.Boolean getIsActivityStream() {
    return isActivityStream;
  }

  /**
   * Sets the value of the 'isActivityStream' field.
   * @param value the value to set.
   */
  public void setIsActivityStream(java.lang.Boolean value) {
    this.isActivityStream = value;
  }

  /**
   * Gets the value of the 'extensionUUID' field.
   */
  public java.lang.CharSequence getExtensionUUID() {
    return extensionUUID;
  }

  /**
   * Sets the value of the 'extensionUUID' field.
   * @param value the value to set.
   */
  public void setExtensionUUID(java.lang.CharSequence value) {
    this.extensionUUID = value;
  }

  /**
   * Creates a new TileInstance RecordBuilder.
   * @return A new TileInstance RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder newBuilder() {
    return new com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder();
  }
  
  /**
   * Creates a new TileInstance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TileInstance RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder newBuilder(com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder other) {
    return new com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder(other);
  }
  
  /**
   * Creates a new TileInstance RecordBuilder by copying an existing TileInstance instance.
   * @param other The existing instance to copy.
   * @return A new TileInstance RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder newBuilder(com.jivesoftware.community.cloudalytics.schemata.TileInstance other) {
    return new com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder(other);
  }
  
  /**
   * RecordBuilder for TileInstance instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TileInstance>
    implements org.apache.avro.data.RecordBuilder<TileInstance> {

    private java.lang.CharSequence tileDefinitionObjectType;
    private long tileDefinitionObjectId;
    private java.lang.CharSequence tileDefinitionName;
    private java.lang.CharSequence tileDefinitionVisualType;
    private boolean isActivityStream;
    private java.lang.CharSequence extensionUUID;

    /** Creates a new Builder */
    private Builder() {
      super(com.jivesoftware.community.cloudalytics.schemata.TileInstance.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tileDefinitionObjectType)) {
        this.tileDefinitionObjectType = data().deepCopy(fields()[0].schema(), other.tileDefinitionObjectType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tileDefinitionObjectId)) {
        this.tileDefinitionObjectId = data().deepCopy(fields()[1].schema(), other.tileDefinitionObjectId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tileDefinitionName)) {
        this.tileDefinitionName = data().deepCopy(fields()[2].schema(), other.tileDefinitionName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tileDefinitionVisualType)) {
        this.tileDefinitionVisualType = data().deepCopy(fields()[3].schema(), other.tileDefinitionVisualType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isActivityStream)) {
        this.isActivityStream = data().deepCopy(fields()[4].schema(), other.isActivityStream);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.extensionUUID)) {
        this.extensionUUID = data().deepCopy(fields()[5].schema(), other.extensionUUID);
        fieldSetFlags()[5] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing TileInstance instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jivesoftware.community.cloudalytics.schemata.TileInstance other) {
            super(com.jivesoftware.community.cloudalytics.schemata.TileInstance.SCHEMA$);
      if (isValidValue(fields()[0], other.tileDefinitionObjectType)) {
        this.tileDefinitionObjectType = data().deepCopy(fields()[0].schema(), other.tileDefinitionObjectType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tileDefinitionObjectId)) {
        this.tileDefinitionObjectId = data().deepCopy(fields()[1].schema(), other.tileDefinitionObjectId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tileDefinitionName)) {
        this.tileDefinitionName = data().deepCopy(fields()[2].schema(), other.tileDefinitionName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tileDefinitionVisualType)) {
        this.tileDefinitionVisualType = data().deepCopy(fields()[3].schema(), other.tileDefinitionVisualType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isActivityStream)) {
        this.isActivityStream = data().deepCopy(fields()[4].schema(), other.isActivityStream);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.extensionUUID)) {
        this.extensionUUID = data().deepCopy(fields()[5].schema(), other.extensionUUID);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'tileDefinitionObjectType' field.
      * @return The value.
      */
    public java.lang.CharSequence getTileDefinitionObjectType() {
      return tileDefinitionObjectType;
    }

    /**
      * Sets the value of the 'tileDefinitionObjectType' field.
      * @param value The value of 'tileDefinitionObjectType'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder setTileDefinitionObjectType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.tileDefinitionObjectType = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'tileDefinitionObjectType' field has been set.
      * @return True if the 'tileDefinitionObjectType' field has been set, false otherwise.
      */
    public boolean hasTileDefinitionObjectType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tileDefinitionObjectType' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder clearTileDefinitionObjectType() {
      tileDefinitionObjectType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tileDefinitionObjectId' field.
      * @return The value.
      */
    public java.lang.Long getTileDefinitionObjectId() {
      return tileDefinitionObjectId;
    }

    /**
      * Sets the value of the 'tileDefinitionObjectId' field.
      * @param value The value of 'tileDefinitionObjectId'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder setTileDefinitionObjectId(long value) {
      validate(fields()[1], value);
      this.tileDefinitionObjectId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'tileDefinitionObjectId' field has been set.
      * @return True if the 'tileDefinitionObjectId' field has been set, false otherwise.
      */
    public boolean hasTileDefinitionObjectId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tileDefinitionObjectId' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder clearTileDefinitionObjectId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tileDefinitionName' field.
      * @return The value.
      */
    public java.lang.CharSequence getTileDefinitionName() {
      return tileDefinitionName;
    }

    /**
      * Sets the value of the 'tileDefinitionName' field.
      * @param value The value of 'tileDefinitionName'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder setTileDefinitionName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.tileDefinitionName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'tileDefinitionName' field has been set.
      * @return True if the 'tileDefinitionName' field has been set, false otherwise.
      */
    public boolean hasTileDefinitionName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tileDefinitionName' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder clearTileDefinitionName() {
      tileDefinitionName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tileDefinitionVisualType' field.
      * @return The value.
      */
    public java.lang.CharSequence getTileDefinitionVisualType() {
      return tileDefinitionVisualType;
    }

    /**
      * Sets the value of the 'tileDefinitionVisualType' field.
      * @param value The value of 'tileDefinitionVisualType'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder setTileDefinitionVisualType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tileDefinitionVisualType = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'tileDefinitionVisualType' field has been set.
      * @return True if the 'tileDefinitionVisualType' field has been set, false otherwise.
      */
    public boolean hasTileDefinitionVisualType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tileDefinitionVisualType' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder clearTileDefinitionVisualType() {
      tileDefinitionVisualType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isActivityStream' field.
      * @return The value.
      */
    public java.lang.Boolean getIsActivityStream() {
      return isActivityStream;
    }

    /**
      * Sets the value of the 'isActivityStream' field.
      * @param value The value of 'isActivityStream'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder setIsActivityStream(boolean value) {
      validate(fields()[4], value);
      this.isActivityStream = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'isActivityStream' field has been set.
      * @return True if the 'isActivityStream' field has been set, false otherwise.
      */
    public boolean hasIsActivityStream() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isActivityStream' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder clearIsActivityStream() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'extensionUUID' field.
      * @return The value.
      */
    public java.lang.CharSequence getExtensionUUID() {
      return extensionUUID;
    }

    /**
      * Sets the value of the 'extensionUUID' field.
      * @param value The value of 'extensionUUID'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder setExtensionUUID(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.extensionUUID = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'extensionUUID' field has been set.
      * @return True if the 'extensionUUID' field has been set, false otherwise.
      */
    public boolean hasExtensionUUID() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'extensionUUID' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.TileInstance.Builder clearExtensionUUID() {
      extensionUUID = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public TileInstance build() {
      try {
        TileInstance record = new TileInstance();
        record.tileDefinitionObjectType = fieldSetFlags()[0] ? this.tileDefinitionObjectType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tileDefinitionObjectId = fieldSetFlags()[1] ? this.tileDefinitionObjectId : (java.lang.Long) defaultValue(fields()[1]);
        record.tileDefinitionName = fieldSetFlags()[2] ? this.tileDefinitionName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tileDefinitionVisualType = fieldSetFlags()[3] ? this.tileDefinitionVisualType : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.isActivityStream = fieldSetFlags()[4] ? this.isActivityStream : (java.lang.Boolean) defaultValue(fields()[4]);
        record.extensionUUID = fieldSetFlags()[5] ? this.extensionUUID : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
