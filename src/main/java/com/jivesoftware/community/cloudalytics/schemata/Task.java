/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.jivesoftware.community.cloudalytics.schemata;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Task extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5075541633646607969L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Task\",\"namespace\":\"com.jivesoftware.community.cloudalytics.schemata\",\"fields\":[{\"name\":\"completed\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"dueDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"owner\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Actor\",\"fields\":[{\"name\":\"class\",\"type\":{\"type\":\"string\",\"order\":\"ignore\"}},{\"name\":\"objectType\",\"type\":\"string\"},{\"name\":\"objectId\",\"type\":\"long\"},{\"name\":\"objectHash\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"isDataAvailable\",\"type\":\"boolean\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"extras\",\"type\":{\"type\":\"map\",\"values\":[\"string\",\"boolean\",\"long\"]}},{\"name\":\"profile\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"email\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"creationDate\",\"type\":\"long\"},{\"name\":\"modificationDate\",\"type\":\"long\"},{\"name\":\"enabled\",\"type\":\"boolean\"},{\"name\":\"lastLoggedIn\",\"type\":\"long\"},{\"name\":\"lastProfileUpdate\",\"type\":\"long\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"federated\",\"type\":\"boolean\"},{\"name\":\"visible\",\"type\":\"boolean\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"order\":\"ignore\"}],\"default\":null},{\"name\":\"parentTask\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ParentTask\",\"fields\":[{\"name\":\"class\",\"type\":{\"type\":\"string\",\"order\":\"ignore\"}},{\"name\":\"objectType\",\"type\":\"string\"},{\"name\":\"objectId\",\"type\":\"long\"},{\"name\":\"objectHash\",\"type\":\"string\"},{\"name\":\"isDataAvailable\",\"type\":\"boolean\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"extras\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"completed\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"dueDate\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"owner\",\"type\":[\"null\",\"Actor\"],\"default\":null},{\"name\":\"parentTask\",\"type\":[\"null\",\"ParentTask\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Boolean completed;
  @Deprecated public java.lang.Long dueDate;
  @Deprecated public com.jivesoftware.community.cloudalytics.schemata.Actor owner;
  @Deprecated public com.jivesoftware.community.cloudalytics.schemata.ParentTask parentTask;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Task() {}

  /**
   * All-args constructor.
   */
  public Task(java.lang.Boolean completed, java.lang.Long dueDate, com.jivesoftware.community.cloudalytics.schemata.Actor owner, com.jivesoftware.community.cloudalytics.schemata.ParentTask parentTask) {
    this.completed = completed;
    this.dueDate = dueDate;
    this.owner = owner;
    this.parentTask = parentTask;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return completed;
    case 1: return dueDate;
    case 2: return owner;
    case 3: return parentTask;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: completed = (java.lang.Boolean)value$; break;
    case 1: dueDate = (java.lang.Long)value$; break;
    case 2: owner = (com.jivesoftware.community.cloudalytics.schemata.Actor)value$; break;
    case 3: parentTask = (com.jivesoftware.community.cloudalytics.schemata.ParentTask)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'completed' field.
   */
  public java.lang.Boolean getCompleted() {
    return completed;
  }

  /**
   * Sets the value of the 'completed' field.
   * @param value the value to set.
   */
  public void setCompleted(java.lang.Boolean value) {
    this.completed = value;
  }

  /**
   * Gets the value of the 'dueDate' field.
   */
  public java.lang.Long getDueDate() {
    return dueDate;
  }

  /**
   * Sets the value of the 'dueDate' field.
   * @param value the value to set.
   */
  public void setDueDate(java.lang.Long value) {
    this.dueDate = value;
  }

  /**
   * Gets the value of the 'owner' field.
   */
  public com.jivesoftware.community.cloudalytics.schemata.Actor getOwner() {
    return owner;
  }

  /**
   * Sets the value of the 'owner' field.
   * @param value the value to set.
   */
  public void setOwner(com.jivesoftware.community.cloudalytics.schemata.Actor value) {
    this.owner = value;
  }

  /**
   * Gets the value of the 'parentTask' field.
   */
  public com.jivesoftware.community.cloudalytics.schemata.ParentTask getParentTask() {
    return parentTask;
  }

  /**
   * Sets the value of the 'parentTask' field.
   * @param value the value to set.
   */
  public void setParentTask(com.jivesoftware.community.cloudalytics.schemata.ParentTask value) {
    this.parentTask = value;
  }

  /**
   * Creates a new Task RecordBuilder.
   * @return A new Task RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.Task.Builder newBuilder() {
    return new com.jivesoftware.community.cloudalytics.schemata.Task.Builder();
  }
  
  /**
   * Creates a new Task RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Task RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.Task.Builder newBuilder(com.jivesoftware.community.cloudalytics.schemata.Task.Builder other) {
    return new com.jivesoftware.community.cloudalytics.schemata.Task.Builder(other);
  }
  
  /**
   * Creates a new Task RecordBuilder by copying an existing Task instance.
   * @param other The existing instance to copy.
   * @return A new Task RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.Task.Builder newBuilder(com.jivesoftware.community.cloudalytics.schemata.Task other) {
    return new com.jivesoftware.community.cloudalytics.schemata.Task.Builder(other);
  }
  
  /**
   * RecordBuilder for Task instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Task>
    implements org.apache.avro.data.RecordBuilder<Task> {

    private java.lang.Boolean completed;
    private java.lang.Long dueDate;
    private com.jivesoftware.community.cloudalytics.schemata.Actor owner;
    private com.jivesoftware.community.cloudalytics.schemata.Actor.Builder ownerBuilder;
    private com.jivesoftware.community.cloudalytics.schemata.ParentTask parentTask;
    private com.jivesoftware.community.cloudalytics.schemata.ParentTask.Builder parentTaskBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(com.jivesoftware.community.cloudalytics.schemata.Task.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jivesoftware.community.cloudalytics.schemata.Task.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.completed)) {
        this.completed = data().deepCopy(fields()[0].schema(), other.completed);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dueDate)) {
        this.dueDate = data().deepCopy(fields()[1].schema(), other.dueDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
      if (other.hasOwnerBuilder()) {
        this.ownerBuilder = com.jivesoftware.community.cloudalytics.schemata.Actor.newBuilder(other.getOwnerBuilder());
      }
      if (isValidValue(fields()[3], other.parentTask)) {
        this.parentTask = data().deepCopy(fields()[3].schema(), other.parentTask);
        fieldSetFlags()[3] = true;
      }
      if (other.hasParentTaskBuilder()) {
        this.parentTaskBuilder = com.jivesoftware.community.cloudalytics.schemata.ParentTask.newBuilder(other.getParentTaskBuilder());
      }
    }
    
    /**
     * Creates a Builder by copying an existing Task instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jivesoftware.community.cloudalytics.schemata.Task other) {
            super(com.jivesoftware.community.cloudalytics.schemata.Task.SCHEMA$);
      if (isValidValue(fields()[0], other.completed)) {
        this.completed = data().deepCopy(fields()[0].schema(), other.completed);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dueDate)) {
        this.dueDate = data().deepCopy(fields()[1].schema(), other.dueDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
      this.ownerBuilder = null;
      if (isValidValue(fields()[3], other.parentTask)) {
        this.parentTask = data().deepCopy(fields()[3].schema(), other.parentTask);
        fieldSetFlags()[3] = true;
      }
      this.parentTaskBuilder = null;
    }

    /**
      * Gets the value of the 'completed' field.
      * @return The value.
      */
    public java.lang.Boolean getCompleted() {
      return completed;
    }

    /**
      * Sets the value of the 'completed' field.
      * @param value The value of 'completed'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder setCompleted(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.completed = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'completed' field has been set.
      * @return True if the 'completed' field has been set, false otherwise.
      */
    public boolean hasCompleted() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'completed' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder clearCompleted() {
      completed = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dueDate' field.
      * @return The value.
      */
    public java.lang.Long getDueDate() {
      return dueDate;
    }

    /**
      * Sets the value of the 'dueDate' field.
      * @param value The value of 'dueDate'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder setDueDate(java.lang.Long value) {
      validate(fields()[1], value);
      this.dueDate = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'dueDate' field has been set.
      * @return True if the 'dueDate' field has been set, false otherwise.
      */
    public boolean hasDueDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dueDate' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder clearDueDate() {
      dueDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'owner' field.
      * @return The value.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Actor getOwner() {
      return owner;
    }

    /**
      * Sets the value of the 'owner' field.
      * @param value The value of 'owner'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder setOwner(com.jivesoftware.community.cloudalytics.schemata.Actor value) {
      validate(fields()[2], value);
      this.ownerBuilder = null;
      this.owner = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'owner' field has been set.
      * @return True if the 'owner' field has been set, false otherwise.
      */
    public boolean hasOwner() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'owner' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.jivesoftware.community.cloudalytics.schemata.Actor.Builder getOwnerBuilder() {
      if (ownerBuilder == null) {
        if (hasOwner()) {
          setOwnerBuilder(com.jivesoftware.community.cloudalytics.schemata.Actor.newBuilder(owner));
        } else {
          setOwnerBuilder(com.jivesoftware.community.cloudalytics.schemata.Actor.newBuilder());
        }
      }
      return ownerBuilder;
    }

    /**
     * Sets the Builder instance for the 'owner' field
     * @return This builder.
     */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder setOwnerBuilder(com.jivesoftware.community.cloudalytics.schemata.Actor.Builder value) {
      clearOwner();
      ownerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'owner' field has an active Builder instance
     * @return True if the 'owner' field has an active Builder instance
     */
    public boolean hasOwnerBuilder() {
      return ownerBuilder != null;
    }

    /**
      * Clears the value of the 'owner' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder clearOwner() {
      owner = null;
      ownerBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentTask' field.
      * @return The value.
      */
    public com.jivesoftware.community.cloudalytics.schemata.ParentTask getParentTask() {
      return parentTask;
    }

    /**
      * Sets the value of the 'parentTask' field.
      * @param value The value of 'parentTask'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder setParentTask(com.jivesoftware.community.cloudalytics.schemata.ParentTask value) {
      validate(fields()[3], value);
      this.parentTaskBuilder = null;
      this.parentTask = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'parentTask' field has been set.
      * @return True if the 'parentTask' field has been set, false otherwise.
      */
    public boolean hasParentTask() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'parentTask' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.jivesoftware.community.cloudalytics.schemata.ParentTask.Builder getParentTaskBuilder() {
      if (parentTaskBuilder == null) {
        if (hasParentTask()) {
          setParentTaskBuilder(com.jivesoftware.community.cloudalytics.schemata.ParentTask.newBuilder(parentTask));
        } else {
          setParentTaskBuilder(com.jivesoftware.community.cloudalytics.schemata.ParentTask.newBuilder());
        }
      }
      return parentTaskBuilder;
    }

    /**
     * Sets the Builder instance for the 'parentTask' field
     * @return This builder.
     */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder setParentTaskBuilder(com.jivesoftware.community.cloudalytics.schemata.ParentTask.Builder value) {
      clearParentTask();
      parentTaskBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'parentTask' field has an active Builder instance
     * @return True if the 'parentTask' field has an active Builder instance
     */
    public boolean hasParentTaskBuilder() {
      return parentTaskBuilder != null;
    }

    /**
      * Clears the value of the 'parentTask' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Task.Builder clearParentTask() {
      parentTask = null;
      parentTaskBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Task build() {
      try {
        Task record = new Task();
        record.completed = fieldSetFlags()[0] ? this.completed : (java.lang.Boolean) defaultValue(fields()[0]);
        record.dueDate = fieldSetFlags()[1] ? this.dueDate : (java.lang.Long) defaultValue(fields()[1]);
        if (ownerBuilder != null) {
          record.owner = this.ownerBuilder.build();
        } else {
          record.owner = fieldSetFlags()[2] ? this.owner : (com.jivesoftware.community.cloudalytics.schemata.Actor) defaultValue(fields()[2]);
        }
        if (parentTaskBuilder != null) {
          record.parentTask = this.parentTaskBuilder.build();
        } else {
          record.parentTask = fieldSetFlags()[3] ? this.parentTask : (com.jivesoftware.community.cloudalytics.schemata.ParentTask) defaultValue(fields()[3]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
