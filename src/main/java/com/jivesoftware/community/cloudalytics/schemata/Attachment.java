/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.jivesoftware.community.cloudalytics.schemata;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Attachment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5818626417265649719L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Attachment\",\"namespace\":\"com.jivesoftware.community.cloudalytics.schemata\",\"fields\":[{\"name\":\"mimeType\",\"type\":{\"type\":\"string\",\"order\":\"ignore\"}},{\"name\":\"fileName\",\"type\":\"string\"},{\"name\":\"attachmentSize\",\"type\":\"int\"},{\"name\":\"contentDataAvailable\",\"type\":\"boolean\"},{\"name\":\"creationDate\",\"type\":\"long\"},{\"name\":\"modificationDate\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence mimeType;
  @Deprecated public java.lang.CharSequence fileName;
  @Deprecated public int attachmentSize;
  @Deprecated public boolean contentDataAvailable;
  @Deprecated public long creationDate;
  @Deprecated public long modificationDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Attachment() {}

  /**
   * All-args constructor.
   */
  public Attachment(java.lang.CharSequence mimeType, java.lang.CharSequence fileName, java.lang.Integer attachmentSize, java.lang.Boolean contentDataAvailable, java.lang.Long creationDate, java.lang.Long modificationDate) {
    this.mimeType = mimeType;
    this.fileName = fileName;
    this.attachmentSize = attachmentSize;
    this.contentDataAvailable = contentDataAvailable;
    this.creationDate = creationDate;
    this.modificationDate = modificationDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mimeType;
    case 1: return fileName;
    case 2: return attachmentSize;
    case 3: return contentDataAvailable;
    case 4: return creationDate;
    case 5: return modificationDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mimeType = (java.lang.CharSequence)value$; break;
    case 1: fileName = (java.lang.CharSequence)value$; break;
    case 2: attachmentSize = (java.lang.Integer)value$; break;
    case 3: contentDataAvailable = (java.lang.Boolean)value$; break;
    case 4: creationDate = (java.lang.Long)value$; break;
    case 5: modificationDate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mimeType' field.
   */
  public java.lang.CharSequence getMimeType() {
    return mimeType;
  }

  /**
   * Sets the value of the 'mimeType' field.
   * @param value the value to set.
   */
  public void setMimeType(java.lang.CharSequence value) {
    this.mimeType = value;
  }

  /**
   * Gets the value of the 'fileName' field.
   */
  public java.lang.CharSequence getFileName() {
    return fileName;
  }

  /**
   * Sets the value of the 'fileName' field.
   * @param value the value to set.
   */
  public void setFileName(java.lang.CharSequence value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the 'attachmentSize' field.
   */
  public java.lang.Integer getAttachmentSize() {
    return attachmentSize;
  }

  /**
   * Sets the value of the 'attachmentSize' field.
   * @param value the value to set.
   */
  public void setAttachmentSize(java.lang.Integer value) {
    this.attachmentSize = value;
  }

  /**
   * Gets the value of the 'contentDataAvailable' field.
   */
  public java.lang.Boolean getContentDataAvailable() {
    return contentDataAvailable;
  }

  /**
   * Sets the value of the 'contentDataAvailable' field.
   * @param value the value to set.
   */
  public void setContentDataAvailable(java.lang.Boolean value) {
    this.contentDataAvailable = value;
  }

  /**
   * Gets the value of the 'creationDate' field.
   */
  public java.lang.Long getCreationDate() {
    return creationDate;
  }

  /**
   * Sets the value of the 'creationDate' field.
   * @param value the value to set.
   */
  public void setCreationDate(java.lang.Long value) {
    this.creationDate = value;
  }

  /**
   * Gets the value of the 'modificationDate' field.
   */
  public java.lang.Long getModificationDate() {
    return modificationDate;
  }

  /**
   * Sets the value of the 'modificationDate' field.
   * @param value the value to set.
   */
  public void setModificationDate(java.lang.Long value) {
    this.modificationDate = value;
  }

  /**
   * Creates a new Attachment RecordBuilder.
   * @return A new Attachment RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder newBuilder() {
    return new com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder();
  }
  
  /**
   * Creates a new Attachment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Attachment RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder newBuilder(com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder other) {
    return new com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder(other);
  }
  
  /**
   * Creates a new Attachment RecordBuilder by copying an existing Attachment instance.
   * @param other The existing instance to copy.
   * @return A new Attachment RecordBuilder
   */
  public static com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder newBuilder(com.jivesoftware.community.cloudalytics.schemata.Attachment other) {
    return new com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder(other);
  }
  
  /**
   * RecordBuilder for Attachment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Attachment>
    implements org.apache.avro.data.RecordBuilder<Attachment> {

    private java.lang.CharSequence mimeType;
    private java.lang.CharSequence fileName;
    private int attachmentSize;
    private boolean contentDataAvailable;
    private long creationDate;
    private long modificationDate;

    /** Creates a new Builder */
    private Builder() {
      super(com.jivesoftware.community.cloudalytics.schemata.Attachment.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[0].schema(), other.mimeType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileName)) {
        this.fileName = data().deepCopy(fields()[1].schema(), other.fileName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attachmentSize)) {
        this.attachmentSize = data().deepCopy(fields()[2].schema(), other.attachmentSize);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contentDataAvailable)) {
        this.contentDataAvailable = data().deepCopy(fields()[3].schema(), other.contentDataAvailable);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.creationDate)) {
        this.creationDate = data().deepCopy(fields()[4].schema(), other.creationDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.modificationDate)) {
        this.modificationDate = data().deepCopy(fields()[5].schema(), other.modificationDate);
        fieldSetFlags()[5] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Attachment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jivesoftware.community.cloudalytics.schemata.Attachment other) {
            super(com.jivesoftware.community.cloudalytics.schemata.Attachment.SCHEMA$);
      if (isValidValue(fields()[0], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[0].schema(), other.mimeType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileName)) {
        this.fileName = data().deepCopy(fields()[1].schema(), other.fileName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attachmentSize)) {
        this.attachmentSize = data().deepCopy(fields()[2].schema(), other.attachmentSize);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contentDataAvailable)) {
        this.contentDataAvailable = data().deepCopy(fields()[3].schema(), other.contentDataAvailable);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.creationDate)) {
        this.creationDate = data().deepCopy(fields()[4].schema(), other.creationDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.modificationDate)) {
        this.modificationDate = data().deepCopy(fields()[5].schema(), other.modificationDate);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'mimeType' field.
      * @return The value.
      */
    public java.lang.CharSequence getMimeType() {
      return mimeType;
    }

    /**
      * Sets the value of the 'mimeType' field.
      * @param value The value of 'mimeType'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder setMimeType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.mimeType = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'mimeType' field has been set.
      * @return True if the 'mimeType' field has been set, false otherwise.
      */
    public boolean hasMimeType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mimeType' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFileName() {
      return fileName;
    }

    /**
      * Sets the value of the 'fileName' field.
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder setFileName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fileName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fileName' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'attachmentSize' field.
      * @return The value.
      */
    public java.lang.Integer getAttachmentSize() {
      return attachmentSize;
    }

    /**
      * Sets the value of the 'attachmentSize' field.
      * @param value The value of 'attachmentSize'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder setAttachmentSize(int value) {
      validate(fields()[2], value);
      this.attachmentSize = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'attachmentSize' field has been set.
      * @return True if the 'attachmentSize' field has been set, false otherwise.
      */
    public boolean hasAttachmentSize() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'attachmentSize' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder clearAttachmentSize() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'contentDataAvailable' field.
      * @return The value.
      */
    public java.lang.Boolean getContentDataAvailable() {
      return contentDataAvailable;
    }

    /**
      * Sets the value of the 'contentDataAvailable' field.
      * @param value The value of 'contentDataAvailable'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder setContentDataAvailable(boolean value) {
      validate(fields()[3], value);
      this.contentDataAvailable = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'contentDataAvailable' field has been set.
      * @return True if the 'contentDataAvailable' field has been set, false otherwise.
      */
    public boolean hasContentDataAvailable() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'contentDataAvailable' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder clearContentDataAvailable() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationDate' field.
      * @return The value.
      */
    public java.lang.Long getCreationDate() {
      return creationDate;
    }

    /**
      * Sets the value of the 'creationDate' field.
      * @param value The value of 'creationDate'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder setCreationDate(long value) {
      validate(fields()[4], value);
      this.creationDate = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'creationDate' field has been set.
      * @return True if the 'creationDate' field has been set, false otherwise.
      */
    public boolean hasCreationDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'creationDate' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder clearCreationDate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'modificationDate' field.
      * @return The value.
      */
    public java.lang.Long getModificationDate() {
      return modificationDate;
    }

    /**
      * Sets the value of the 'modificationDate' field.
      * @param value The value of 'modificationDate'.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder setModificationDate(long value) {
      validate(fields()[5], value);
      this.modificationDate = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'modificationDate' field has been set.
      * @return True if the 'modificationDate' field has been set, false otherwise.
      */
    public boolean hasModificationDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'modificationDate' field.
      * @return This builder.
      */
    public com.jivesoftware.community.cloudalytics.schemata.Attachment.Builder clearModificationDate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Attachment build() {
      try {
        Attachment record = new Attachment();
        record.mimeType = fieldSetFlags()[0] ? this.mimeType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fileName = fieldSetFlags()[1] ? this.fileName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.attachmentSize = fieldSetFlags()[2] ? this.attachmentSize : (java.lang.Integer) defaultValue(fields()[2]);
        record.contentDataAvailable = fieldSetFlags()[3] ? this.contentDataAvailable : (java.lang.Boolean) defaultValue(fields()[3]);
        record.creationDate = fieldSetFlags()[4] ? this.creationDate : (java.lang.Long) defaultValue(fields()[4]);
        record.modificationDate = fieldSetFlags()[5] ? this.modificationDate : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
